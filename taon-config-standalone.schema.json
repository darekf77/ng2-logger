{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/definitions/Models.TaonJsonStandalone",
  "definitions": {
    "Models.TaonJsonStandalone": {
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/CoreModels.FrameworkVersion",
          "description": "version of taon framework for project"
        },
        "isCoreProject": {
          "type": "boolean",
          "description": "project is template for other project"
        },
        "packageJsonOverride": {
          "type": "object",
          "properties": {
            "packageManager": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "keywords": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                }
              ]
            },
            "homepage": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "bugs": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      }
                    ]
                  },
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "The URL to the package's issue tracker."
                    },
                    "email": {
                      "type": "string",
                      "description": "The email address to which issues should be reported."
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "The URL to the package's issue tracker."
                    },
                    "email": {
                      "type": "string",
                      "description": "The email address to which issues should be reported."
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "The URL to the package's issue tracker."
                    },
                    "email": {
                      "type": "string",
                      "description": "The email address to which issues should be reported."
                    }
                  }
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "The URL to the package's issue tracker."
                        },
                        "email": {
                          "type": "string",
                          "description": "The email address to which issues should be reported."
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "license": {
              "type": "string"
            },
            "licenses": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  ]
                }
              ]
            },
            "author": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      }
                    ]
                  },
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ]
                    }
                  ]
                }
              ]
            },
            "contributors": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      }
                    }
                  ]
                }
              ]
            },
            "maintainers": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      }
                    }
                  ]
                }
              ]
            },
            "files": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                }
              ]
            },
            "type": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "main": {
              "type": "string"
            },
            "exports": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/definitions/PackageJson.ExportConditions"
                          }
                        ]
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "$ref": "#/definitions/PackageJson.Exports"
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/definitions/PackageJson.ExportConditions"
                          }
                        ]
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/definitions/PackageJson.ExportConditions"
                          }
                        ]
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/definitions/PackageJson.ExportConditions"
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/definitions/PackageJson.Exports"
                      },
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "imports": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "$ref": "#/definitions/PackageJson.Exports"
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/definitions/PackageJson.Exports"
                      },
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "bin": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "man": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                }
              ]
            },
            "directories": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      }
                    ]
                  },
                  "properties": {
                    "bin": {
                      "type": "string",
                      "description": "Location for executable scripts. Sugar to generate entries in the `bin` property by walking the folder."
                    },
                    "doc": {
                      "type": "string",
                      "description": "Location for Markdown files."
                    },
                    "example": {
                      "type": "string",
                      "description": "Location for example scripts."
                    },
                    "lib": {
                      "type": "string",
                      "description": "Location for the bulk of the library."
                    },
                    "man": {
                      "type": "string",
                      "description": "Location for man pages. Sugar to generate a `man` array by walking the folder."
                    },
                    "test": {
                      "type": "string",
                      "description": "Location for test files."
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "bin": {
                      "type": "string",
                      "description": "Location for executable scripts. Sugar to generate entries in the `bin` property by walking the folder."
                    },
                    "doc": {
                      "type": "string",
                      "description": "Location for Markdown files."
                    },
                    "example": {
                      "type": "string",
                      "description": "Location for example scripts."
                    },
                    "lib": {
                      "type": "string",
                      "description": "Location for the bulk of the library."
                    },
                    "man": {
                      "type": "string",
                      "description": "Location for man pages. Sugar to generate a `man` array by walking the folder."
                    },
                    "test": {
                      "type": "string",
                      "description": "Location for test files."
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "bin": {
                      "type": "string",
                      "description": "Location for executable scripts. Sugar to generate entries in the `bin` property by walking the folder."
                    },
                    "doc": {
                      "type": "string",
                      "description": "Location for Markdown files."
                    },
                    "example": {
                      "type": "string",
                      "description": "Location for example scripts."
                    },
                    "lib": {
                      "type": "string",
                      "description": "Location for the bulk of the library."
                    },
                    "man": {
                      "type": "string",
                      "description": "Location for man pages. Sugar to generate a `man` array by walking the folder."
                    },
                    "test": {
                      "type": "string",
                      "description": "Location for test files."
                    }
                  }
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {
                        "bin": {
                          "type": "string",
                          "description": "Location for executable scripts. Sugar to generate entries in the `bin` property by walking the folder."
                        },
                        "doc": {
                          "type": "string",
                          "description": "Location for Markdown files."
                        },
                        "example": {
                          "type": "string",
                          "description": "Location for example scripts."
                        },
                        "lib": {
                          "type": "string",
                          "description": "Location for the bulk of the library."
                        },
                        "man": {
                          "type": "string",
                          "description": "Location for man pages. Sugar to generate a `man` array by walking the folder."
                        },
                        "test": {
                          "type": "string",
                          "description": "Location for test files."
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "repository": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      }
                    ]
                  },
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "directory": {
                      "type": "string",
                      "description": "Relative path to package.json if it is placed in non-root directory (for example if it is part of a monorepo).\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/implemented/0010-monorepo-subdirectory-declaration.md)"
                    }
                  },
                  "required": [
                    "type",
                    "url"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "directory": {
                      "type": "string",
                      "description": "Relative path to package.json if it is placed in non-root directory (for example if it is part of a monorepo).\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/implemented/0010-monorepo-subdirectory-declaration.md)"
                    }
                  },
                  "required": [
                    "type",
                    "url"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "directory": {
                      "type": "string",
                      "description": "Relative path to package.json if it is placed in non-root directory (for example if it is part of a monorepo).\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/implemented/0010-monorepo-subdirectory-declaration.md)"
                    }
                  },
                  "required": [
                    "type",
                    "url"
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        },
                        "directory": {
                          "type": "string",
                          "description": "Relative path to package.json if it is placed in non-root directory (for example if it is part of a monorepo).\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/implemented/0010-monorepo-subdirectory-declaration.md)"
                        }
                      },
                      "required": [
                        "type",
                        "url"
                      ]
                    }
                  ]
                }
              ]
            },
            "scripts": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "properties": {
                    "prepublish": {
                      "type": "string",
                      "description": "Run **before** the package is published (Also run on local `npm install` without any arguments)."
                    },
                    "prepare": {
                      "type": "string",
                      "description": "Run both **before** the package is packed and published, and on local `npm install` without any arguments. This is run **after** `prepublish`, but **before** `prepublishOnly`."
                    },
                    "prepublishOnly": {
                      "type": "string",
                      "description": "Run **before** the package is prepared and packed, **only** on `npm publish`."
                    },
                    "prepack": {
                      "type": "string",
                      "description": "Run **before** a tarball is packed (on `npm pack`, `npm publish`, and when installing git dependencies)."
                    },
                    "postpack": {
                      "type": "string",
                      "description": "Run **after** the tarball has been generated and moved to its final destination."
                    },
                    "publish": {
                      "type": "string",
                      "description": "Run **after** the package is published."
                    },
                    "postpublish": {
                      "type": "string",
                      "description": "Run **after** the package is published."
                    },
                    "preinstall": {
                      "type": "string",
                      "description": "Run **before** the package is installed."
                    },
                    "install": {
                      "type": "string",
                      "description": "Run **after** the package is installed."
                    },
                    "postinstall": {
                      "type": "string",
                      "description": "Run **after** the package is installed and after `install`."
                    },
                    "preuninstall": {
                      "type": "string",
                      "description": "Run **before** the package is uninstalled and before `uninstall`."
                    },
                    "uninstall": {
                      "type": "string",
                      "description": "Run **before** the package is uninstalled."
                    },
                    "postuninstall": {
                      "type": "string",
                      "description": "Run **after** the package is uninstalled."
                    },
                    "preversion": {
                      "type": "string",
                      "description": "Run **before** bump the package version and before `version`."
                    },
                    "version": {
                      "type": "string",
                      "description": "Run **before** bump the package version."
                    },
                    "postversion": {
                      "type": "string",
                      "description": "Run **after** bump the package version."
                    },
                    "pretest": {
                      "type": "string",
                      "description": "Run with the `npm test` command, before `test`."
                    },
                    "test": {
                      "type": "string",
                      "description": "Run with the `npm test` command."
                    },
                    "posttest": {
                      "type": "string",
                      "description": "Run with the `npm test` command, after `test`."
                    },
                    "prestop": {
                      "type": "string",
                      "description": "Run with the `npm stop` command, before `stop`."
                    },
                    "stop": {
                      "type": "string",
                      "description": "Run with the `npm stop` command."
                    },
                    "poststop": {
                      "type": "string",
                      "description": "Run with the `npm stop` command, after `stop`."
                    },
                    "prestart": {
                      "type": "string",
                      "description": "Run with the `npm start` command, before `start`."
                    },
                    "start": {
                      "type": "string",
                      "description": "Run with the `npm start` command."
                    },
                    "poststart": {
                      "type": "string",
                      "description": "Run with the `npm start` command, after `start`."
                    },
                    "prerestart": {
                      "type": "string",
                      "description": "Run with the `npm restart` command, before `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
                    },
                    "restart": {
                      "type": "string",
                      "description": "Run with the `npm restart` command. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
                    },
                    "postrestart": {
                      "type": "string",
                      "description": "Run with the `npm restart` command, after `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "prepublish": {
                      "type": "string",
                      "description": "Run **before** the package is published (Also run on local `npm install` without any arguments)."
                    },
                    "prepare": {
                      "type": "string",
                      "description": "Run both **before** the package is packed and published, and on local `npm install` without any arguments. This is run **after** `prepublish`, but **before** `prepublishOnly`."
                    },
                    "prepublishOnly": {
                      "type": "string",
                      "description": "Run **before** the package is prepared and packed, **only** on `npm publish`."
                    },
                    "prepack": {
                      "type": "string",
                      "description": "Run **before** a tarball is packed (on `npm pack`, `npm publish`, and when installing git dependencies)."
                    },
                    "postpack": {
                      "type": "string",
                      "description": "Run **after** the tarball has been generated and moved to its final destination."
                    },
                    "publish": {
                      "type": "string",
                      "description": "Run **after** the package is published."
                    },
                    "postpublish": {
                      "type": "string",
                      "description": "Run **after** the package is published."
                    },
                    "preinstall": {
                      "type": "string",
                      "description": "Run **before** the package is installed."
                    },
                    "install": {
                      "type": "string",
                      "description": "Run **after** the package is installed."
                    },
                    "postinstall": {
                      "type": "string",
                      "description": "Run **after** the package is installed and after `install`."
                    },
                    "preuninstall": {
                      "type": "string",
                      "description": "Run **before** the package is uninstalled and before `uninstall`."
                    },
                    "uninstall": {
                      "type": "string",
                      "description": "Run **before** the package is uninstalled."
                    },
                    "postuninstall": {
                      "type": "string",
                      "description": "Run **after** the package is uninstalled."
                    },
                    "preversion": {
                      "type": "string",
                      "description": "Run **before** bump the package version and before `version`."
                    },
                    "version": {
                      "type": "string",
                      "description": "Run **before** bump the package version."
                    },
                    "postversion": {
                      "type": "string",
                      "description": "Run **after** bump the package version."
                    },
                    "pretest": {
                      "type": "string",
                      "description": "Run with the `npm test` command, before `test`."
                    },
                    "test": {
                      "type": "string",
                      "description": "Run with the `npm test` command."
                    },
                    "posttest": {
                      "type": "string",
                      "description": "Run with the `npm test` command, after `test`."
                    },
                    "prestop": {
                      "type": "string",
                      "description": "Run with the `npm stop` command, before `stop`."
                    },
                    "stop": {
                      "type": "string",
                      "description": "Run with the `npm stop` command."
                    },
                    "poststop": {
                      "type": "string",
                      "description": "Run with the `npm stop` command, after `stop`."
                    },
                    "prestart": {
                      "type": "string",
                      "description": "Run with the `npm start` command, before `start`."
                    },
                    "start": {
                      "type": "string",
                      "description": "Run with the `npm start` command."
                    },
                    "poststart": {
                      "type": "string",
                      "description": "Run with the `npm start` command, after `start`."
                    },
                    "prerestart": {
                      "type": "string",
                      "description": "Run with the `npm restart` command, before `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
                    },
                    "restart": {
                      "type": "string",
                      "description": "Run with the `npm restart` command. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
                    },
                    "postrestart": {
                      "type": "string",
                      "description": "Run with the `npm restart` command, after `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "prepublish": {
                      "type": "string",
                      "description": "Run **before** the package is published (Also run on local `npm install` without any arguments)."
                    },
                    "prepare": {
                      "type": "string",
                      "description": "Run both **before** the package is packed and published, and on local `npm install` without any arguments. This is run **after** `prepublish`, but **before** `prepublishOnly`."
                    },
                    "prepublishOnly": {
                      "type": "string",
                      "description": "Run **before** the package is prepared and packed, **only** on `npm publish`."
                    },
                    "prepack": {
                      "type": "string",
                      "description": "Run **before** a tarball is packed (on `npm pack`, `npm publish`, and when installing git dependencies)."
                    },
                    "postpack": {
                      "type": "string",
                      "description": "Run **after** the tarball has been generated and moved to its final destination."
                    },
                    "publish": {
                      "type": "string",
                      "description": "Run **after** the package is published."
                    },
                    "postpublish": {
                      "type": "string",
                      "description": "Run **after** the package is published."
                    },
                    "preinstall": {
                      "type": "string",
                      "description": "Run **before** the package is installed."
                    },
                    "install": {
                      "type": "string",
                      "description": "Run **after** the package is installed."
                    },
                    "postinstall": {
                      "type": "string",
                      "description": "Run **after** the package is installed and after `install`."
                    },
                    "preuninstall": {
                      "type": "string",
                      "description": "Run **before** the package is uninstalled and before `uninstall`."
                    },
                    "uninstall": {
                      "type": "string",
                      "description": "Run **before** the package is uninstalled."
                    },
                    "postuninstall": {
                      "type": "string",
                      "description": "Run **after** the package is uninstalled."
                    },
                    "preversion": {
                      "type": "string",
                      "description": "Run **before** bump the package version and before `version`."
                    },
                    "version": {
                      "type": "string",
                      "description": "Run **before** bump the package version."
                    },
                    "postversion": {
                      "type": "string",
                      "description": "Run **after** bump the package version."
                    },
                    "pretest": {
                      "type": "string",
                      "description": "Run with the `npm test` command, before `test`."
                    },
                    "test": {
                      "type": "string",
                      "description": "Run with the `npm test` command."
                    },
                    "posttest": {
                      "type": "string",
                      "description": "Run with the `npm test` command, after `test`."
                    },
                    "prestop": {
                      "type": "string",
                      "description": "Run with the `npm stop` command, before `stop`."
                    },
                    "stop": {
                      "type": "string",
                      "description": "Run with the `npm stop` command."
                    },
                    "poststop": {
                      "type": "string",
                      "description": "Run with the `npm stop` command, after `stop`."
                    },
                    "prestart": {
                      "type": "string",
                      "description": "Run with the `npm start` command, before `start`."
                    },
                    "start": {
                      "type": "string",
                      "description": "Run with the `npm start` command."
                    },
                    "poststart": {
                      "type": "string",
                      "description": "Run with the `npm start` command, after `start`."
                    },
                    "prerestart": {
                      "type": "string",
                      "description": "Run with the `npm restart` command, before `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
                    },
                    "restart": {
                      "type": "string",
                      "description": "Run with the `npm restart` command. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
                    },
                    "postrestart": {
                      "type": "string",
                      "description": "Run with the `npm restart` command, after `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
                    }
                  }
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "properties": {
                        "prepublish": {
                          "type": "string",
                          "description": "Run **before** the package is published (Also run on local `npm install` without any arguments)."
                        },
                        "prepare": {
                          "type": "string",
                          "description": "Run both **before** the package is packed and published, and on local `npm install` without any arguments. This is run **after** `prepublish`, but **before** `prepublishOnly`."
                        },
                        "prepublishOnly": {
                          "type": "string",
                          "description": "Run **before** the package is prepared and packed, **only** on `npm publish`."
                        },
                        "prepack": {
                          "type": "string",
                          "description": "Run **before** a tarball is packed (on `npm pack`, `npm publish`, and when installing git dependencies)."
                        },
                        "postpack": {
                          "type": "string",
                          "description": "Run **after** the tarball has been generated and moved to its final destination."
                        },
                        "publish": {
                          "type": "string",
                          "description": "Run **after** the package is published."
                        },
                        "postpublish": {
                          "type": "string",
                          "description": "Run **after** the package is published."
                        },
                        "preinstall": {
                          "type": "string",
                          "description": "Run **before** the package is installed."
                        },
                        "install": {
                          "type": "string",
                          "description": "Run **after** the package is installed."
                        },
                        "postinstall": {
                          "type": "string",
                          "description": "Run **after** the package is installed and after `install`."
                        },
                        "preuninstall": {
                          "type": "string",
                          "description": "Run **before** the package is uninstalled and before `uninstall`."
                        },
                        "uninstall": {
                          "type": "string",
                          "description": "Run **before** the package is uninstalled."
                        },
                        "postuninstall": {
                          "type": "string",
                          "description": "Run **after** the package is uninstalled."
                        },
                        "preversion": {
                          "type": "string",
                          "description": "Run **before** bump the package version and before `version`."
                        },
                        "version": {
                          "type": "string",
                          "description": "Run **before** bump the package version."
                        },
                        "postversion": {
                          "type": "string",
                          "description": "Run **after** bump the package version."
                        },
                        "pretest": {
                          "type": "string",
                          "description": "Run with the `npm test` command, before `test`."
                        },
                        "test": {
                          "type": "string",
                          "description": "Run with the `npm test` command."
                        },
                        "posttest": {
                          "type": "string",
                          "description": "Run with the `npm test` command, after `test`."
                        },
                        "prestop": {
                          "type": "string",
                          "description": "Run with the `npm stop` command, before `stop`."
                        },
                        "stop": {
                          "type": "string",
                          "description": "Run with the `npm stop` command."
                        },
                        "poststop": {
                          "type": "string",
                          "description": "Run with the `npm stop` command, after `stop`."
                        },
                        "prestart": {
                          "type": "string",
                          "description": "Run with the `npm start` command, before `start`."
                        },
                        "start": {
                          "type": "string",
                          "description": "Run with the `npm start` command."
                        },
                        "poststart": {
                          "type": "string",
                          "description": "Run with the `npm start` command, after `start`."
                        },
                        "prerestart": {
                          "type": "string",
                          "description": "Run with the `npm restart` command, before `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
                        },
                        "restart": {
                          "type": "string",
                          "description": "Run with the `npm restart` command. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
                        },
                        "postrestart": {
                          "type": "string",
                          "description": "Run with the `npm restart` command, after `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "config": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "$ref": "#/definitions/JsonObject"
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "dependencies": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "devDependencies": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "optionalDependencies": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "peerDependencies": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "peerDependenciesMeta": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "type": "object"
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object"
                      },
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "bundledDependencies": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                }
              ]
            },
            "bundleDependencies": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                }
              ]
            },
            "engines": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "properties": {
                    "npm": {
                      "type": "string"
                    },
                    "node": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "npm": {
                      "type": "string"
                    },
                    "node": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "npm": {
                      "type": "string"
                    },
                    "node": {
                      "type": "string"
                    }
                  }
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "properties": {
                        "npm": {
                          "type": "string"
                        },
                        "node": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "engineStrict": {
              "type": "boolean"
            },
            "os": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22aix%22%7C%22darwin%22%7C%22freebsd%22%7C%22linux%22%7C%22openbsd%22%7C%22sunos%22%7C%22win32%22%7C%22!aix%22%7C%22!darwin%22%7C%22!freebsd%22%7C%22!linux%22%7C%22!openbsd%22%7C%22!sunos%22%7C%22!win32%22)%2Cstring%3E"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22aix%22%7C%22darwin%22%7C%22freebsd%22%7C%22linux%22%7C%22openbsd%22%7C%22sunos%22%7C%22win32%22%7C%22!aix%22%7C%22!darwin%22%7C%22!freebsd%22%7C%22!linux%22%7C%22!openbsd%22%7C%22!sunos%22%7C%22!win32%22)%2Cstring%3E"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22aix%22%7C%22darwin%22%7C%22freebsd%22%7C%22linux%22%7C%22openbsd%22%7C%22sunos%22%7C%22win32%22%7C%22!aix%22%7C%22!darwin%22%7C%22!freebsd%22%7C%22!linux%22%7C%22!openbsd%22%7C%22!sunos%22%7C%22!win32%22)%2Cstring%3E"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22aix%22%7C%22darwin%22%7C%22freebsd%22%7C%22linux%22%7C%22openbsd%22%7C%22sunos%22%7C%22win32%22%7C%22!aix%22%7C%22!darwin%22%7C%22!freebsd%22%7C%22!linux%22%7C%22!openbsd%22%7C%22!sunos%22%7C%22!win32%22)%2Cstring%3E"
                      }
                    }
                  ]
                }
              ]
            },
            "cpu": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22arm%22%7C%22arm64%22%7C%22ia32%22%7C%22mips%22%7C%22mipsel%22%7C%22ppc%22%7C%22ppc64%22%7C%22s390%22%7C%22s390x%22%7C%22x32%22%7C%22x64%22%7C%22!arm%22%7C%22!arm64%22%7C%22!ia32%22%7C%22!mips%22%7C%22!mipsel%22%7C%22!ppc%22%7C%22!ppc64%22%7C%22!s390%22%7C%22!s390x%22%7C%22!x32%22%7C%22!x64%22)%2Cstring%3E"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22arm%22%7C%22arm64%22%7C%22ia32%22%7C%22mips%22%7C%22mipsel%22%7C%22ppc%22%7C%22ppc64%22%7C%22s390%22%7C%22s390x%22%7C%22x32%22%7C%22x64%22%7C%22!arm%22%7C%22!arm64%22%7C%22!ia32%22%7C%22!mips%22%7C%22!mipsel%22%7C%22!ppc%22%7C%22!ppc64%22%7C%22!s390%22%7C%22!s390x%22%7C%22!x32%22%7C%22!x64%22)%2Cstring%3E"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22arm%22%7C%22arm64%22%7C%22ia32%22%7C%22mips%22%7C%22mipsel%22%7C%22ppc%22%7C%22ppc64%22%7C%22s390%22%7C%22s390x%22%7C%22x32%22%7C%22x64%22%7C%22!arm%22%7C%22!arm64%22%7C%22!ia32%22%7C%22!mips%22%7C%22!mipsel%22%7C%22!ppc%22%7C%22!ppc64%22%7C%22!s390%22%7C%22!s390x%22%7C%22!x32%22%7C%22!x64%22)%2Cstring%3E"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22arm%22%7C%22arm64%22%7C%22ia32%22%7C%22mips%22%7C%22mipsel%22%7C%22ppc%22%7C%22ppc64%22%7C%22s390%22%7C%22s390x%22%7C%22x32%22%7C%22x64%22%7C%22!arm%22%7C%22!arm64%22%7C%22!ia32%22%7C%22!mips%22%7C%22!mipsel%22%7C%22!ppc%22%7C%22!ppc64%22%7C%22!s390%22%7C%22!s390x%22%7C%22!x32%22%7C%22!x64%22)%2Cstring%3E"
                      }
                    }
                  ]
                }
              ]
            },
            "preferGlobal": {
              "type": "boolean"
            },
            "private": {
              "type": "boolean"
            },
            "publishConfig": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      }
                    ]
                  },
                  "properties": {
                    "access": {
                      "type": "string",
                      "enum": [
                        "public",
                        "restricted"
                      ],
                      "description": "When publishing scoped packages, the access level defaults to restricted. If you want your scoped package to be publicly viewable (and installable) set `--access=public`. The only valid values for access are public and restricted. Unscoped packages always have an access level of public."
                    },
                    "registry": {
                      "type": "string",
                      "description": "The base URL of the npm registry.\n\nDefault: `'https://registry.npmjs.org/'`"
                    },
                    "tag": {
                      "type": "string",
                      "description": "The tag to publish the package under.\n\nDefault: `'latest'`"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "access": {
                      "type": "string",
                      "enum": [
                        "public",
                        "restricted"
                      ],
                      "description": "When publishing scoped packages, the access level defaults to restricted. If you want your scoped package to be publicly viewable (and installable) set `--access=public`. The only valid values for access are public and restricted. Unscoped packages always have an access level of public."
                    },
                    "registry": {
                      "type": "string",
                      "description": "The base URL of the npm registry.\n\nDefault: `'https://registry.npmjs.org/'`"
                    },
                    "tag": {
                      "type": "string",
                      "description": "The tag to publish the package under.\n\nDefault: `'latest'`"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "access": {
                      "type": "string",
                      "enum": [
                        "public",
                        "restricted"
                      ],
                      "description": "When publishing scoped packages, the access level defaults to restricted. If you want your scoped package to be publicly viewable (and installable) set `--access=public`. The only valid values for access are public and restricted. Unscoped packages always have an access level of public."
                    },
                    "registry": {
                      "type": "string",
                      "description": "The base URL of the npm registry.\n\nDefault: `'https://registry.npmjs.org/'`"
                    },
                    "tag": {
                      "type": "string",
                      "description": "The tag to publish the package under.\n\nDefault: `'latest'`"
                    }
                  }
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {
                        "access": {
                          "type": "string",
                          "enum": [
                            "public",
                            "restricted"
                          ],
                          "description": "When publishing scoped packages, the access level defaults to restricted. If you want your scoped package to be publicly viewable (and installable) set `--access=public`. The only valid values for access are public and restricted. Unscoped packages always have an access level of public."
                        },
                        "registry": {
                          "type": "string",
                          "description": "The base URL of the npm registry.\n\nDefault: `'https://registry.npmjs.org/'`"
                        },
                        "tag": {
                          "type": "string",
                          "description": "The tag to publish the package under.\n\nDefault: `'latest'`"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "funding": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      }
                    ]
                  },
                  "properties": {
                    "type": {
                      "$ref": "#/definitions/LiteralUnion%3C(%22github%22%7C%22opencollective%22%7C%22patreon%22%7C%22individual%22%7C%22foundation%22%7C%22corporation%22)%2Cstring%3E",
                      "description": "The type of funding."
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL to the funding page."
                    }
                  },
                  "required": [
                    "url"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "$ref": "#/definitions/LiteralUnion%3C(%22github%22%7C%22opencollective%22%7C%22patreon%22%7C%22individual%22%7C%22foundation%22%7C%22corporation%22)%2Cstring%3E",
                      "description": "The type of funding."
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL to the funding page."
                    }
                  },
                  "required": [
                    "url"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "$ref": "#/definitions/LiteralUnion%3C(%22github%22%7C%22opencollective%22%7C%22patreon%22%7C%22individual%22%7C%22foundation%22%7C%22corporation%22)%2Cstring%3E",
                      "description": "The type of funding."
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL to the funding page."
                    }
                  },
                  "required": [
                    "url"
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "$ref": "#/definitions/LiteralUnion%3C(%22github%22%7C%22opencollective%22%7C%22patreon%22%7C%22individual%22%7C%22foundation%22%7C%22corporation%22)%2Cstring%3E",
                          "description": "The type of funding."
                        },
                        "url": {
                          "type": "string",
                          "description": "The URL to the funding page."
                        }
                      },
                      "required": [
                        "url"
                      ]
                    }
                  ]
                }
              ]
            },
            "workspaces": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.WorkspacePattern"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      }
                    ]
                  },
                  "properties": {
                    "packages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.WorkspacePattern"
                      },
                      "description": "An array of workspace pattern strings which contain the workspace packages."
                    },
                    "nohoist": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.WorkspacePattern"
                      },
                      "description": "Designed to solve the problem of packages which break when their `node_modules` are moved to the root workspace directory - a process known as hoisting. For these packages, both within your workspace, and also some that have been installed via `node_modules`, it is important to have a mechanism for preventing the default Yarn workspace behavior. By adding workspace pattern strings here, Yarn will resume non-workspace behavior for any package which matches the defined patterns.\n\n[Supported](https://classic.yarnpkg.com/blog/2018/02/15/nohoist/) by Yarn. [Not supported](https://github.com/npm/rfcs/issues/287) by npm."
                    }
                  }
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.WorkspacePattern"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "packages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.WorkspacePattern"
                      },
                      "description": "An array of workspace pattern strings which contain the workspace packages."
                    },
                    "nohoist": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.WorkspacePattern"
                      },
                      "description": "Designed to solve the problem of packages which break when their `node_modules` are moved to the root workspace directory - a process known as hoisting. For these packages, both within your workspace, and also some that have been installed via `node_modules`, it is important to have a mechanism for preventing the default Yarn workspace behavior. By adding workspace pattern strings here, Yarn will resume non-workspace behavior for any package which matches the defined patterns.\n\n[Supported](https://classic.yarnpkg.com/blog/2018/02/15/nohoist/) by Yarn. [Not supported](https://github.com/npm/rfcs/issues/287) by npm."
                    }
                  }
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.WorkspacePattern"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "packages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.WorkspacePattern"
                      },
                      "description": "An array of workspace pattern strings which contain the workspace packages."
                    },
                    "nohoist": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.WorkspacePattern"
                      },
                      "description": "Designed to solve the problem of packages which break when their `node_modules` are moved to the root workspace directory - a process known as hoisting. For these packages, both within your workspace, and also some that have been installed via `node_modules`, it is important to have a mechanism for preventing the default Yarn workspace behavior. By adding workspace pattern strings here, Yarn will resume non-workspace behavior for any package which matches the defined patterns.\n\n[Supported](https://classic.yarnpkg.com/blog/2018/02/15/nohoist/) by Yarn. [Not supported](https://github.com/npm/rfcs/issues/287) by npm."
                    }
                  }
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.WorkspacePattern"
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "packages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/PackageJson.WorkspacePattern"
                          },
                          "description": "An array of workspace pattern strings which contain the workspace packages."
                        },
                        "nohoist": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/PackageJson.WorkspacePattern"
                          },
                          "description": "Designed to solve the problem of packages which break when their `node_modules` are moved to the root workspace directory - a process known as hoisting. For these packages, both within your workspace, and also some that have been installed via `node_modules`, it is important to have a mechanism for preventing the default Yarn workspace behavior. By adding workspace pattern strings here, Yarn will resume non-workspace behavior for any package which matches the defined patterns.\n\n[Supported](https://classic.yarnpkg.com/blog/2018/02/15/nohoist/) by Yarn. [Not supported](https://github.com/npm/rfcs/issues/287) by npm."
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "module": {
              "type": "string"
            },
            "esnext": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "not": {}
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "properties": {
                    "main": {
                      "type": "string"
                    },
                    "browser": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "main": {
                      "type": "string"
                    },
                    "browser": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "main": {
                      "type": "string"
                    },
                    "browser": {
                      "type": "string"
                    }
                  }
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "not": {}
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "properties": {
                        "main": {
                          "type": "string"
                        },
                        "browser": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "browser": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "type": "boolean"
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      },
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "sideEffects": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                }
              ]
            },
            "types": {
              "type": "string"
            },
            "typesVersions": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "type": "object"
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object"
                      },
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "typings": {
              "type": "string"
            },
            "flat": {
              "type": "boolean"
            },
            "resolutions": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "properties": {}
                    }
                  ]
                }
              ]
            },
            "jspm": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "$ref": "#/definitions/JsonValue"
                      },
                      {
                        "not": {}
                      }
                    ]
                  },
                  "properties": {
                    "jspm": {
                      "$ref": "#/definitions/PackageJson",
                      "description": "JSPM configuration."
                    },
                    "flat": {
                      "type": "boolean",
                      "description": "If your package only allows one version of a given dependency, and you’d like to enforce the same behavior as `yarn install --flat` on the command-line, set this to `true`.\n\nNote that if your `package.json` contains `\"flat\": true` and other packages depend on yours (e.g. you are building a library rather than an app), those other packages will also need `\"flat\": true` in their `package.json` or be installed with `yarn install --flat` on the command-line."
                    },
                    "resolutions": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "Selective version resolutions. Allows the definition of custom package versions inside dependencies without manual edits in the `yarn.lock` file."
                    },
                    "types": {
                      "type": "string",
                      "description": "Location of the bundled TypeScript declaration file."
                    },
                    "typesVersions": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Version selection map of TypeScript."
                    },
                    "typings": {
                      "type": "string",
                      "description": "Location of the bundled TypeScript declaration file. Alias of `types`."
                    },
                    "module": {
                      "type": "string",
                      "description": "An ECMAScript module ID that is the primary entry point to the program."
                    },
                    "esnext": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "main": {
                              "type": "string"
                            },
                            "browser": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "not": {}
                              }
                            ]
                          }
                        }
                      ],
                      "description": "A module ID with untranspiled code that is the primary entry point to the program."
                    },
                    "browser": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "additionalProperties": {
                            "type": "boolean",
                            "enum": [
                              false
                            ]
                          }
                        }
                      ],
                      "description": "A hint to JavaScript bundlers or component tools when packaging modules for client side use."
                    },
                    "sideEffects": {
                      "anyOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      ],
                      "description": "Denote which files in your project are \"pure\" and therefore safe for Webpack to prune if unused.\n\n[Read more.](https://webpack.js.org/guides/tree-shaking/)"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the package."
                    },
                    "version": {
                      "type": "string",
                      "description": "Package version, parseable by [`node-semver`](https://github.com/npm/node-semver)."
                    },
                    "description": {
                      "type": "string",
                      "description": "Package description, listed in `npm search`."
                    },
                    "keywords": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Keywords associated with package, listed in `npm search`."
                    },
                    "homepage": {
                      "$ref": "#/definitions/LiteralUnion%3C%22.%22%2Cstring%3E",
                      "description": "The URL to the package's homepage."
                    },
                    "bugs": {
                      "$ref": "#/definitions/PackageJson.BugsLocation",
                      "description": "The URL to the package's issue tracker and/or the email address to which issues should be reported."
                    },
                    "license": {
                      "type": "string",
                      "description": "The license for the package."
                    },
                    "licenses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "description": "The licenses for the package."
                    },
                    "author": {
                      "$ref": "#/definitions/PackageJson.Person"
                    },
                    "contributors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      },
                      "description": "A list of people who contributed to the package."
                    },
                    "maintainers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      },
                      "description": "A list of people who maintain the package."
                    },
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The files included in the package."
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "module",
                        "commonjs"
                      ],
                      "description": "Resolution algorithm for importing \".js\" files from the package's scope.\n\n[Read more.](https://nodejs.org/api/esm.html#esm_package_json_type_field)"
                    },
                    "main": {
                      "type": "string",
                      "description": "The module ID that is the primary entry point to the program."
                    },
                    "exports": {
                      "$ref": "#/definitions/PackageJson.Exports",
                      "description": "Subpath exports to define entry points of the package.\n\n[Read more.](https://nodejs.org/api/packages.html#subpath-exports)"
                    },
                    "imports": {
                      "$ref": "#/definitions/PackageJson.Imports",
                      "description": "Subpath imports to define internal package import maps that only apply to import specifiers from within the package itself.\n\n[Read more.](https://nodejs.org/api/packages.html#subpath-imports)"
                    },
                    "bin": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      ],
                      "description": "The executable files that should be installed into the `PATH`."
                    },
                    "man": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      ],
                      "description": "Filenames to put in place for the `man` program to find."
                    },
                    "directories": {
                      "$ref": "#/definitions/PackageJson.DirectoryLocations",
                      "description": "Indicates the structure of the package."
                    },
                    "repository": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "url": {
                              "type": "string"
                            },
                            "directory": {
                              "type": "string",
                              "description": "Relative path to package.json if it is placed in non-root directory (for example if it is part of a monorepo).\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/implemented/0010-monorepo-subdirectory-declaration.md)"
                            }
                          },
                          "required": [
                            "type",
                            "url"
                          ],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Location for the code repository."
                    },
                    "scripts": {
                      "$ref": "#/definitions/PackageJson.Scripts",
                      "description": "Script commands that are run at various times in the lifecycle of the package. The key is the lifecycle event, and the value is the command to run at that point."
                    },
                    "config": {
                      "$ref": "#/definitions/JsonObject",
                      "description": "Is used to set configuration parameters used in package scripts that persist across upgrades."
                    },
                    "dependencies": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "The dependencies of the package."
                    },
                    "devDependencies": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "Additional tooling dependencies that are not required for the package to work. Usually test, build, or documentation tooling."
                    },
                    "optionalDependencies": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "Dependencies that are skipped if they fail to install."
                    },
                    "peerDependencies": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "Dependencies that will usually be required by the package user directly or via another dependency."
                    },
                    "peerDependenciesMeta": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "optional": {
                            "type": "boolean",
                            "const": true
                          }
                        },
                        "required": [
                          "optional"
                        ],
                        "additionalProperties": false
                      },
                      "description": "Indicate peer dependencies that are optional."
                    },
                    "bundledDependencies": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Package names that are bundled when the package is published."
                    },
                    "bundleDependencies": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Alias of `bundledDependencies`."
                    },
                    "engines": {
                      "type": "object",
                      "properties": {
                        "npm": {
                          "type": "string"
                        },
                        "node": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Engines that this package runs on."
                    },
                    "engineStrict": {
                      "type": "boolean",
                      "deprecated": true
                    },
                    "os": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22aix%22%7C%22darwin%22%7C%22freebsd%22%7C%22linux%22%7C%22openbsd%22%7C%22sunos%22%7C%22win32%22%7C%22!aix%22%7C%22!darwin%22%7C%22!freebsd%22%7C%22!linux%22%7C%22!openbsd%22%7C%22!sunos%22%7C%22!win32%22)%2Cstring%3E"
                      },
                      "description": "Operating systems the module runs on."
                    },
                    "cpu": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22arm%22%7C%22arm64%22%7C%22ia32%22%7C%22mips%22%7C%22mipsel%22%7C%22ppc%22%7C%22ppc64%22%7C%22s390%22%7C%22s390x%22%7C%22x32%22%7C%22x64%22%7C%22!arm%22%7C%22!arm64%22%7C%22!ia32%22%7C%22!mips%22%7C%22!mipsel%22%7C%22!ppc%22%7C%22!ppc64%22%7C%22!s390%22%7C%22!s390x%22%7C%22!x32%22%7C%22!x64%22)%2Cstring%3E"
                      },
                      "description": "CPU architectures the module runs on."
                    },
                    "preferGlobal": {
                      "type": "boolean",
                      "description": "If set to `true`, a warning will be shown if package is installed locally. Useful if the package is primarily a command-line application that should be installed globally.",
                      "deprecated": true
                    },
                    "private": {
                      "type": "boolean",
                      "description": "If set to `true`, then npm will refuse to publish it."
                    },
                    "publishConfig": {
                      "$ref": "#/definitions/PackageJson.PublishConfig",
                      "description": "A set of config values that will be used at publish-time. It's especially handy to set the tag, registry or access, to ensure that a given package is not tagged with 'latest', published to the global public registry or that a scoped module is private by default."
                    },
                    "funding": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "$ref": "#/definitions/LiteralUnion%3C(%22github%22%7C%22opencollective%22%7C%22patreon%22%7C%22individual%22%7C%22foundation%22%7C%22corporation%22)%2Cstring%3E",
                              "description": "The type of funding."
                            },
                            "url": {
                              "type": "string",
                              "description": "The URL to the funding page."
                            }
                          },
                          "required": [
                            "url"
                          ],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Describes and notifies consumers of a package's monetary support information.\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/accepted/0017-add-funding-support.md)"
                    },
                    "workspaces": {
                      "anyOf": [
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/PackageJson.WorkspacePattern"
                          }
                        },
                        {
                          "$ref": "#/definitions/PackageJson.WorkspaceConfig"
                        }
                      ],
                      "description": "Used to configure [npm workspaces](https://docs.npmjs.com/cli/using-npm/workspaces) / [Yarn workspaces](https://classic.yarnpkg.com/docs/workspaces/).\n\nWorkspaces allow you to manage multiple packages within the same repository in such a way that you only need to run your install command once in order to install all of them in a single pass.\n\nPlease note that the top-level `private` property of `package.json` **must** be set to `true` in order to use workspaces."
                    },
                    "packageManager": {
                      "type": "string",
                      "description": "Defines which package manager is expected to be used when working on the current project. It can set to any of the [supported package managers](https://nodejs.org/api/corepack.html#supported-package-managers), and will ensure that your teams use the exact same package manager versions without having to install anything else than Node.js.\n\n__This field is currently experimental and needs to be opted-in; check the [Corepack](https://nodejs.org/api/corepack.html) page for details about the procedure.__"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "jspm": {
                      "$ref": "#/definitions/PackageJson",
                      "description": "JSPM configuration."
                    },
                    "flat": {
                      "type": "boolean",
                      "description": "If your package only allows one version of a given dependency, and you’d like to enforce the same behavior as `yarn install --flat` on the command-line, set this to `true`.\n\nNote that if your `package.json` contains `\"flat\": true` and other packages depend on yours (e.g. you are building a library rather than an app), those other packages will also need `\"flat\": true` in their `package.json` or be installed with `yarn install --flat` on the command-line."
                    },
                    "resolutions": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "Selective version resolutions. Allows the definition of custom package versions inside dependencies without manual edits in the `yarn.lock` file."
                    },
                    "types": {
                      "type": "string",
                      "description": "Location of the bundled TypeScript declaration file."
                    },
                    "typesVersions": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Version selection map of TypeScript."
                    },
                    "typings": {
                      "type": "string",
                      "description": "Location of the bundled TypeScript declaration file. Alias of `types`."
                    },
                    "module": {
                      "type": "string",
                      "description": "An ECMAScript module ID that is the primary entry point to the program."
                    },
                    "esnext": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "main": {
                              "type": "string"
                            },
                            "browser": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "not": {}
                              }
                            ]
                          }
                        }
                      ],
                      "description": "A module ID with untranspiled code that is the primary entry point to the program."
                    },
                    "browser": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "additionalProperties": {
                            "type": "boolean",
                            "enum": [
                              false
                            ]
                          }
                        }
                      ],
                      "description": "A hint to JavaScript bundlers or component tools when packaging modules for client side use."
                    },
                    "sideEffects": {
                      "anyOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      ],
                      "description": "Denote which files in your project are \"pure\" and therefore safe for Webpack to prune if unused.\n\n[Read more.](https://webpack.js.org/guides/tree-shaking/)"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the package."
                    },
                    "version": {
                      "type": "string",
                      "description": "Package version, parseable by [`node-semver`](https://github.com/npm/node-semver)."
                    },
                    "description": {
                      "type": "string",
                      "description": "Package description, listed in `npm search`."
                    },
                    "keywords": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Keywords associated with package, listed in `npm search`."
                    },
                    "homepage": {
                      "$ref": "#/definitions/LiteralUnion%3C%22.%22%2Cstring%3E",
                      "description": "The URL to the package's homepage."
                    },
                    "bugs": {
                      "$ref": "#/definitions/PackageJson.BugsLocation",
                      "description": "The URL to the package's issue tracker and/or the email address to which issues should be reported."
                    },
                    "license": {
                      "type": "string",
                      "description": "The license for the package."
                    },
                    "licenses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "description": "The licenses for the package."
                    },
                    "author": {
                      "$ref": "#/definitions/PackageJson.Person"
                    },
                    "contributors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      },
                      "description": "A list of people who contributed to the package."
                    },
                    "maintainers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      },
                      "description": "A list of people who maintain the package."
                    },
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The files included in the package."
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "module",
                        "commonjs"
                      ],
                      "description": "Resolution algorithm for importing \".js\" files from the package's scope.\n\n[Read more.](https://nodejs.org/api/esm.html#esm_package_json_type_field)"
                    },
                    "main": {
                      "type": "string",
                      "description": "The module ID that is the primary entry point to the program."
                    },
                    "exports": {
                      "$ref": "#/definitions/PackageJson.Exports",
                      "description": "Subpath exports to define entry points of the package.\n\n[Read more.](https://nodejs.org/api/packages.html#subpath-exports)"
                    },
                    "imports": {
                      "$ref": "#/definitions/PackageJson.Imports",
                      "description": "Subpath imports to define internal package import maps that only apply to import specifiers from within the package itself.\n\n[Read more.](https://nodejs.org/api/packages.html#subpath-imports)"
                    },
                    "bin": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      ],
                      "description": "The executable files that should be installed into the `PATH`."
                    },
                    "man": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      ],
                      "description": "Filenames to put in place for the `man` program to find."
                    },
                    "directories": {
                      "$ref": "#/definitions/PackageJson.DirectoryLocations",
                      "description": "Indicates the structure of the package."
                    },
                    "repository": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "url": {
                              "type": "string"
                            },
                            "directory": {
                              "type": "string",
                              "description": "Relative path to package.json if it is placed in non-root directory (for example if it is part of a monorepo).\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/implemented/0010-monorepo-subdirectory-declaration.md)"
                            }
                          },
                          "required": [
                            "type",
                            "url"
                          ],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Location for the code repository."
                    },
                    "scripts": {
                      "$ref": "#/definitions/PackageJson.Scripts",
                      "description": "Script commands that are run at various times in the lifecycle of the package. The key is the lifecycle event, and the value is the command to run at that point."
                    },
                    "config": {
                      "$ref": "#/definitions/JsonObject",
                      "description": "Is used to set configuration parameters used in package scripts that persist across upgrades."
                    },
                    "dependencies": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "The dependencies of the package."
                    },
                    "devDependencies": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "Additional tooling dependencies that are not required for the package to work. Usually test, build, or documentation tooling."
                    },
                    "optionalDependencies": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "Dependencies that are skipped if they fail to install."
                    },
                    "peerDependencies": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "Dependencies that will usually be required by the package user directly or via another dependency."
                    },
                    "peerDependenciesMeta": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "optional": {
                            "type": "boolean",
                            "const": true
                          }
                        },
                        "required": [
                          "optional"
                        ],
                        "additionalProperties": false
                      },
                      "description": "Indicate peer dependencies that are optional."
                    },
                    "bundledDependencies": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Package names that are bundled when the package is published."
                    },
                    "bundleDependencies": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Alias of `bundledDependencies`."
                    },
                    "engines": {
                      "type": "object",
                      "properties": {
                        "npm": {
                          "type": "string"
                        },
                        "node": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Engines that this package runs on."
                    },
                    "engineStrict": {
                      "type": "boolean",
                      "deprecated": true
                    },
                    "os": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22aix%22%7C%22darwin%22%7C%22freebsd%22%7C%22linux%22%7C%22openbsd%22%7C%22sunos%22%7C%22win32%22%7C%22!aix%22%7C%22!darwin%22%7C%22!freebsd%22%7C%22!linux%22%7C%22!openbsd%22%7C%22!sunos%22%7C%22!win32%22)%2Cstring%3E"
                      },
                      "description": "Operating systems the module runs on."
                    },
                    "cpu": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22arm%22%7C%22arm64%22%7C%22ia32%22%7C%22mips%22%7C%22mipsel%22%7C%22ppc%22%7C%22ppc64%22%7C%22s390%22%7C%22s390x%22%7C%22x32%22%7C%22x64%22%7C%22!arm%22%7C%22!arm64%22%7C%22!ia32%22%7C%22!mips%22%7C%22!mipsel%22%7C%22!ppc%22%7C%22!ppc64%22%7C%22!s390%22%7C%22!s390x%22%7C%22!x32%22%7C%22!x64%22)%2Cstring%3E"
                      },
                      "description": "CPU architectures the module runs on."
                    },
                    "preferGlobal": {
                      "type": "boolean",
                      "description": "If set to `true`, a warning will be shown if package is installed locally. Useful if the package is primarily a command-line application that should be installed globally.",
                      "deprecated": true
                    },
                    "private": {
                      "type": "boolean",
                      "description": "If set to `true`, then npm will refuse to publish it."
                    },
                    "publishConfig": {
                      "$ref": "#/definitions/PackageJson.PublishConfig",
                      "description": "A set of config values that will be used at publish-time. It's especially handy to set the tag, registry or access, to ensure that a given package is not tagged with 'latest', published to the global public registry or that a scoped module is private by default."
                    },
                    "funding": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "$ref": "#/definitions/LiteralUnion%3C(%22github%22%7C%22opencollective%22%7C%22patreon%22%7C%22individual%22%7C%22foundation%22%7C%22corporation%22)%2Cstring%3E",
                              "description": "The type of funding."
                            },
                            "url": {
                              "type": "string",
                              "description": "The URL to the funding page."
                            }
                          },
                          "required": [
                            "url"
                          ],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Describes and notifies consumers of a package's monetary support information.\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/accepted/0017-add-funding-support.md)"
                    },
                    "workspaces": {
                      "anyOf": [
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/PackageJson.WorkspacePattern"
                          }
                        },
                        {
                          "$ref": "#/definitions/PackageJson.WorkspaceConfig"
                        }
                      ],
                      "description": "Used to configure [npm workspaces](https://docs.npmjs.com/cli/using-npm/workspaces) / [Yarn workspaces](https://classic.yarnpkg.com/docs/workspaces/).\n\nWorkspaces allow you to manage multiple packages within the same repository in such a way that you only need to run your install command once in order to install all of them in a single pass.\n\nPlease note that the top-level `private` property of `package.json` **must** be set to `true` in order to use workspaces."
                    },
                    "packageManager": {
                      "type": "string",
                      "description": "Defines which package manager is expected to be used when working on the current project. It can set to any of the [supported package managers](https://nodejs.org/api/corepack.html#supported-package-managers), and will ensure that your teams use the exact same package manager versions without having to install anything else than Node.js.\n\n__This field is currently experimental and needs to be opted-in; check the [Corepack](https://nodejs.org/api/corepack.html) page for details about the procedure.__"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "jspm": {
                      "$ref": "#/definitions/PackageJson",
                      "description": "JSPM configuration."
                    },
                    "flat": {
                      "type": "boolean",
                      "description": "If your package only allows one version of a given dependency, and you’d like to enforce the same behavior as `yarn install --flat` on the command-line, set this to `true`.\n\nNote that if your `package.json` contains `\"flat\": true` and other packages depend on yours (e.g. you are building a library rather than an app), those other packages will also need `\"flat\": true` in their `package.json` or be installed with `yarn install --flat` on the command-line."
                    },
                    "resolutions": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "Selective version resolutions. Allows the definition of custom package versions inside dependencies without manual edits in the `yarn.lock` file."
                    },
                    "types": {
                      "type": "string",
                      "description": "Location of the bundled TypeScript declaration file."
                    },
                    "typesVersions": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Version selection map of TypeScript."
                    },
                    "typings": {
                      "type": "string",
                      "description": "Location of the bundled TypeScript declaration file. Alias of `types`."
                    },
                    "module": {
                      "type": "string",
                      "description": "An ECMAScript module ID that is the primary entry point to the program."
                    },
                    "esnext": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "main": {
                              "type": "string"
                            },
                            "browser": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "not": {}
                              }
                            ]
                          }
                        }
                      ],
                      "description": "A module ID with untranspiled code that is the primary entry point to the program."
                    },
                    "browser": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "additionalProperties": {
                            "type": "boolean",
                            "enum": [
                              false
                            ]
                          }
                        }
                      ],
                      "description": "A hint to JavaScript bundlers or component tools when packaging modules for client side use."
                    },
                    "sideEffects": {
                      "anyOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      ],
                      "description": "Denote which files in your project are \"pure\" and therefore safe for Webpack to prune if unused.\n\n[Read more.](https://webpack.js.org/guides/tree-shaking/)"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the package."
                    },
                    "version": {
                      "type": "string",
                      "description": "Package version, parseable by [`node-semver`](https://github.com/npm/node-semver)."
                    },
                    "description": {
                      "type": "string",
                      "description": "Package description, listed in `npm search`."
                    },
                    "keywords": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Keywords associated with package, listed in `npm search`."
                    },
                    "homepage": {
                      "$ref": "#/definitions/LiteralUnion%3C%22.%22%2Cstring%3E",
                      "description": "The URL to the package's homepage."
                    },
                    "bugs": {
                      "$ref": "#/definitions/PackageJson.BugsLocation",
                      "description": "The URL to the package's issue tracker and/or the email address to which issues should be reported."
                    },
                    "license": {
                      "type": "string",
                      "description": "The license for the package."
                    },
                    "licenses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "description": "The licenses for the package."
                    },
                    "author": {
                      "$ref": "#/definitions/PackageJson.Person"
                    },
                    "contributors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      },
                      "description": "A list of people who contributed to the package."
                    },
                    "maintainers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PackageJson.Person"
                      },
                      "description": "A list of people who maintain the package."
                    },
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The files included in the package."
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "module",
                        "commonjs"
                      ],
                      "description": "Resolution algorithm for importing \".js\" files from the package's scope.\n\n[Read more.](https://nodejs.org/api/esm.html#esm_package_json_type_field)"
                    },
                    "main": {
                      "type": "string",
                      "description": "The module ID that is the primary entry point to the program."
                    },
                    "exports": {
                      "$ref": "#/definitions/PackageJson.Exports",
                      "description": "Subpath exports to define entry points of the package.\n\n[Read more.](https://nodejs.org/api/packages.html#subpath-exports)"
                    },
                    "imports": {
                      "$ref": "#/definitions/PackageJson.Imports",
                      "description": "Subpath imports to define internal package import maps that only apply to import specifiers from within the package itself.\n\n[Read more.](https://nodejs.org/api/packages.html#subpath-imports)"
                    },
                    "bin": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      ],
                      "description": "The executable files that should be installed into the `PATH`."
                    },
                    "man": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      ],
                      "description": "Filenames to put in place for the `man` program to find."
                    },
                    "directories": {
                      "$ref": "#/definitions/PackageJson.DirectoryLocations",
                      "description": "Indicates the structure of the package."
                    },
                    "repository": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "url": {
                              "type": "string"
                            },
                            "directory": {
                              "type": "string",
                              "description": "Relative path to package.json if it is placed in non-root directory (for example if it is part of a monorepo).\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/implemented/0010-monorepo-subdirectory-declaration.md)"
                            }
                          },
                          "required": [
                            "type",
                            "url"
                          ],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Location for the code repository."
                    },
                    "scripts": {
                      "$ref": "#/definitions/PackageJson.Scripts",
                      "description": "Script commands that are run at various times in the lifecycle of the package. The key is the lifecycle event, and the value is the command to run at that point."
                    },
                    "config": {
                      "$ref": "#/definitions/JsonObject",
                      "description": "Is used to set configuration parameters used in package scripts that persist across upgrades."
                    },
                    "dependencies": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "The dependencies of the package."
                    },
                    "devDependencies": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "Additional tooling dependencies that are not required for the package to work. Usually test, build, or documentation tooling."
                    },
                    "optionalDependencies": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "Dependencies that are skipped if they fail to install."
                    },
                    "peerDependencies": {
                      "$ref": "#/definitions/PackageJson.Dependency",
                      "description": "Dependencies that will usually be required by the package user directly or via another dependency."
                    },
                    "peerDependenciesMeta": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "optional": {
                            "type": "boolean",
                            "const": true
                          }
                        },
                        "required": [
                          "optional"
                        ],
                        "additionalProperties": false
                      },
                      "description": "Indicate peer dependencies that are optional."
                    },
                    "bundledDependencies": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Package names that are bundled when the package is published."
                    },
                    "bundleDependencies": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Alias of `bundledDependencies`."
                    },
                    "engines": {
                      "type": "object",
                      "properties": {
                        "npm": {
                          "type": "string"
                        },
                        "node": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Engines that this package runs on."
                    },
                    "engineStrict": {
                      "type": "boolean",
                      "deprecated": true
                    },
                    "os": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22aix%22%7C%22darwin%22%7C%22freebsd%22%7C%22linux%22%7C%22openbsd%22%7C%22sunos%22%7C%22win32%22%7C%22!aix%22%7C%22!darwin%22%7C%22!freebsd%22%7C%22!linux%22%7C%22!openbsd%22%7C%22!sunos%22%7C%22!win32%22)%2Cstring%3E"
                      },
                      "description": "Operating systems the module runs on."
                    },
                    "cpu": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiteralUnion%3C(%22arm%22%7C%22arm64%22%7C%22ia32%22%7C%22mips%22%7C%22mipsel%22%7C%22ppc%22%7C%22ppc64%22%7C%22s390%22%7C%22s390x%22%7C%22x32%22%7C%22x64%22%7C%22!arm%22%7C%22!arm64%22%7C%22!ia32%22%7C%22!mips%22%7C%22!mipsel%22%7C%22!ppc%22%7C%22!ppc64%22%7C%22!s390%22%7C%22!s390x%22%7C%22!x32%22%7C%22!x64%22)%2Cstring%3E"
                      },
                      "description": "CPU architectures the module runs on."
                    },
                    "preferGlobal": {
                      "type": "boolean",
                      "description": "If set to `true`, a warning will be shown if package is installed locally. Useful if the package is primarily a command-line application that should be installed globally.",
                      "deprecated": true
                    },
                    "private": {
                      "type": "boolean",
                      "description": "If set to `true`, then npm will refuse to publish it."
                    },
                    "publishConfig": {
                      "$ref": "#/definitions/PackageJson.PublishConfig",
                      "description": "A set of config values that will be used at publish-time. It's especially handy to set the tag, registry or access, to ensure that a given package is not tagged with 'latest', published to the global public registry or that a scoped module is private by default."
                    },
                    "funding": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "$ref": "#/definitions/LiteralUnion%3C(%22github%22%7C%22opencollective%22%7C%22patreon%22%7C%22individual%22%7C%22foundation%22%7C%22corporation%22)%2Cstring%3E",
                              "description": "The type of funding."
                            },
                            "url": {
                              "type": "string",
                              "description": "The URL to the funding page."
                            }
                          },
                          "required": [
                            "url"
                          ],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Describes and notifies consumers of a package's monetary support information.\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/accepted/0017-add-funding-support.md)"
                    },
                    "workspaces": {
                      "anyOf": [
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/PackageJson.WorkspacePattern"
                          }
                        },
                        {
                          "$ref": "#/definitions/PackageJson.WorkspaceConfig"
                        }
                      ],
                      "description": "Used to configure [npm workspaces](https://docs.npmjs.com/cli/using-npm/workspaces) / [Yarn workspaces](https://classic.yarnpkg.com/docs/workspaces/).\n\nWorkspaces allow you to manage multiple packages within the same repository in such a way that you only need to run your install command once in order to install all of them in a single pass.\n\nPlease note that the top-level `private` property of `package.json` **must** be set to `true` in order to use workspaces."
                    },
                    "packageManager": {
                      "type": "string",
                      "description": "Defines which package manager is expected to be used when working on the current project. It can set to any of the [supported package managers](https://nodejs.org/api/corepack.html#supported-package-managers), and will ensure that your teams use the exact same package manager versions without having to install anything else than Node.js.\n\n__This field is currently experimental and needs to be opted-in; check the [Corepack](https://nodejs.org/api/corepack.html) page for details about the procedure.__"
                    }
                  }
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/JsonValue"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "$ref": "#/definitions/JsonValue"
                          },
                          {
                            "not": {}
                          }
                        ]
                      },
                      "properties": {
                        "jspm": {
                          "$ref": "#/definitions/PackageJson",
                          "description": "JSPM configuration."
                        },
                        "flat": {
                          "type": "boolean",
                          "description": "If your package only allows one version of a given dependency, and you’d like to enforce the same behavior as `yarn install --flat` on the command-line, set this to `true`.\n\nNote that if your `package.json` contains `\"flat\": true` and other packages depend on yours (e.g. you are building a library rather than an app), those other packages will also need `\"flat\": true` in their `package.json` or be installed with `yarn install --flat` on the command-line."
                        },
                        "resolutions": {
                          "$ref": "#/definitions/PackageJson.Dependency",
                          "description": "Selective version resolutions. Allows the definition of custom package versions inside dependencies without manual edits in the `yarn.lock` file."
                        },
                        "types": {
                          "type": "string",
                          "description": "Location of the bundled TypeScript declaration file."
                        },
                        "typesVersions": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Version selection map of TypeScript."
                        },
                        "typings": {
                          "type": "string",
                          "description": "Location of the bundled TypeScript declaration file. Alias of `types`."
                        },
                        "module": {
                          "type": "string",
                          "description": "An ECMAScript module ID that is the primary entry point to the program."
                        },
                        "esnext": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "main": {
                                  "type": "string"
                                },
                                "browser": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "not": {}
                                  }
                                ]
                              }
                            }
                          ],
                          "description": "A module ID with untranspiled code that is the primary entry point to the program."
                        },
                        "browser": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": {
                                "type": "boolean",
                                "enum": [
                                  false
                                ]
                              }
                            }
                          ],
                          "description": "A hint to JavaScript bundlers or component tools when packaging modules for client side use."
                        },
                        "sideEffects": {
                          "anyOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          ],
                          "description": "Denote which files in your project are \"pure\" and therefore safe for Webpack to prune if unused.\n\n[Read more.](https://webpack.js.org/guides/tree-shaking/)"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the package."
                        },
                        "version": {
                          "type": "string",
                          "description": "Package version, parseable by [`node-semver`](https://github.com/npm/node-semver)."
                        },
                        "description": {
                          "type": "string",
                          "description": "Package description, listed in `npm search`."
                        },
                        "keywords": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Keywords associated with package, listed in `npm search`."
                        },
                        "homepage": {
                          "$ref": "#/definitions/LiteralUnion%3C%22.%22%2Cstring%3E",
                          "description": "The URL to the package's homepage."
                        },
                        "bugs": {
                          "$ref": "#/definitions/PackageJson.BugsLocation",
                          "description": "The URL to the package's issue tracker and/or the email address to which issues should be reported."
                        },
                        "license": {
                          "type": "string",
                          "description": "The license for the package."
                        },
                        "licenses": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "url": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "description": "The licenses for the package."
                        },
                        "author": {
                          "$ref": "#/definitions/PackageJson.Person"
                        },
                        "contributors": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/PackageJson.Person"
                          },
                          "description": "A list of people who contributed to the package."
                        },
                        "maintainers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/PackageJson.Person"
                          },
                          "description": "A list of people who maintain the package."
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "The files included in the package."
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "module",
                            "commonjs"
                          ],
                          "description": "Resolution algorithm for importing \".js\" files from the package's scope.\n\n[Read more.](https://nodejs.org/api/esm.html#esm_package_json_type_field)"
                        },
                        "main": {
                          "type": "string",
                          "description": "The module ID that is the primary entry point to the program."
                        },
                        "exports": {
                          "$ref": "#/definitions/PackageJson.Exports",
                          "description": "Subpath exports to define entry points of the package.\n\n[Read more.](https://nodejs.org/api/packages.html#subpath-exports)"
                        },
                        "imports": {
                          "$ref": "#/definitions/PackageJson.Imports",
                          "description": "Subpath imports to define internal package import maps that only apply to import specifiers from within the package itself.\n\n[Read more.](https://nodejs.org/api/packages.html#subpath-imports)"
                        },
                        "bin": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          ],
                          "description": "The executable files that should be installed into the `PATH`."
                        },
                        "man": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          ],
                          "description": "Filenames to put in place for the `man` program to find."
                        },
                        "directories": {
                          "$ref": "#/definitions/PackageJson.DirectoryLocations",
                          "description": "Indicates the structure of the package."
                        },
                        "repository": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "url": {
                                  "type": "string"
                                },
                                "directory": {
                                  "type": "string",
                                  "description": "Relative path to package.json if it is placed in non-root directory (for example if it is part of a monorepo).\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/implemented/0010-monorepo-subdirectory-declaration.md)"
                                }
                              },
                              "required": [
                                "type",
                                "url"
                              ],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Location for the code repository."
                        },
                        "scripts": {
                          "$ref": "#/definitions/PackageJson.Scripts",
                          "description": "Script commands that are run at various times in the lifecycle of the package. The key is the lifecycle event, and the value is the command to run at that point."
                        },
                        "config": {
                          "$ref": "#/definitions/JsonObject",
                          "description": "Is used to set configuration parameters used in package scripts that persist across upgrades."
                        },
                        "dependencies": {
                          "$ref": "#/definitions/PackageJson.Dependency",
                          "description": "The dependencies of the package."
                        },
                        "devDependencies": {
                          "$ref": "#/definitions/PackageJson.Dependency",
                          "description": "Additional tooling dependencies that are not required for the package to work. Usually test, build, or documentation tooling."
                        },
                        "optionalDependencies": {
                          "$ref": "#/definitions/PackageJson.Dependency",
                          "description": "Dependencies that are skipped if they fail to install."
                        },
                        "peerDependencies": {
                          "$ref": "#/definitions/PackageJson.Dependency",
                          "description": "Dependencies that will usually be required by the package user directly or via another dependency."
                        },
                        "peerDependenciesMeta": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "optional": {
                                "type": "boolean",
                                "const": true
                              }
                            },
                            "required": [
                              "optional"
                            ],
                            "additionalProperties": false
                          },
                          "description": "Indicate peer dependencies that are optional."
                        },
                        "bundledDependencies": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Package names that are bundled when the package is published."
                        },
                        "bundleDependencies": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Alias of `bundledDependencies`."
                        },
                        "engines": {
                          "type": "object",
                          "properties": {
                            "npm": {
                              "type": "string"
                            },
                            "node": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Engines that this package runs on."
                        },
                        "engineStrict": {
                          "type": "boolean",
                          "deprecated": true
                        },
                        "os": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/LiteralUnion%3C(%22aix%22%7C%22darwin%22%7C%22freebsd%22%7C%22linux%22%7C%22openbsd%22%7C%22sunos%22%7C%22win32%22%7C%22!aix%22%7C%22!darwin%22%7C%22!freebsd%22%7C%22!linux%22%7C%22!openbsd%22%7C%22!sunos%22%7C%22!win32%22)%2Cstring%3E"
                          },
                          "description": "Operating systems the module runs on."
                        },
                        "cpu": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/LiteralUnion%3C(%22arm%22%7C%22arm64%22%7C%22ia32%22%7C%22mips%22%7C%22mipsel%22%7C%22ppc%22%7C%22ppc64%22%7C%22s390%22%7C%22s390x%22%7C%22x32%22%7C%22x64%22%7C%22!arm%22%7C%22!arm64%22%7C%22!ia32%22%7C%22!mips%22%7C%22!mipsel%22%7C%22!ppc%22%7C%22!ppc64%22%7C%22!s390%22%7C%22!s390x%22%7C%22!x32%22%7C%22!x64%22)%2Cstring%3E"
                          },
                          "description": "CPU architectures the module runs on."
                        },
                        "preferGlobal": {
                          "type": "boolean",
                          "description": "If set to `true`, a warning will be shown if package is installed locally. Useful if the package is primarily a command-line application that should be installed globally.",
                          "deprecated": true
                        },
                        "private": {
                          "type": "boolean",
                          "description": "If set to `true`, then npm will refuse to publish it."
                        },
                        "publishConfig": {
                          "$ref": "#/definitions/PackageJson.PublishConfig",
                          "description": "A set of config values that will be used at publish-time. It's especially handy to set the tag, registry or access, to ensure that a given package is not tagged with 'latest', published to the global public registry or that a scoped module is private by default."
                        },
                        "funding": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "$ref": "#/definitions/LiteralUnion%3C(%22github%22%7C%22opencollective%22%7C%22patreon%22%7C%22individual%22%7C%22foundation%22%7C%22corporation%22)%2Cstring%3E",
                                  "description": "The type of funding."
                                },
                                "url": {
                                  "type": "string",
                                  "description": "The URL to the funding page."
                                }
                              },
                              "required": [
                                "url"
                              ],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Describes and notifies consumers of a package's monetary support information.\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/accepted/0017-add-funding-support.md)"
                        },
                        "workspaces": {
                          "anyOf": [
                            {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/PackageJson.WorkspacePattern"
                              }
                            },
                            {
                              "$ref": "#/definitions/PackageJson.WorkspaceConfig"
                            }
                          ],
                          "description": "Used to configure [npm workspaces](https://docs.npmjs.com/cli/using-npm/workspaces) / [Yarn workspaces](https://classic.yarnpkg.com/docs/workspaces/).\n\nWorkspaces allow you to manage multiple packages within the same repository in such a way that you only need to run your install command once in order to install all of them in a single pass.\n\nPlease note that the top-level `private` property of `package.json` **must** be set to `true` in order to use workspaces."
                        },
                        "packageManager": {
                          "type": "string",
                          "description": "Defines which package manager is expected to be used when working on the current project. It can set to any of the [supported package managers](https://nodejs.org/api/corepack.html#supported-package-managers), and will ensure that your teams use the exact same package manager versions without having to install anything else than Node.js.\n\n__This field is currently experimental and needs to be opted-in; check the [Corepack](https://nodejs.org/api/corepack.html) page for details about the procedure.__"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "removeAfterPullingFromGit": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Folders to remove after pulling from git. Usefull when you have some folders that are not needed in git but there just waiting to be deleted after pulling from git. This may be useful after refactor/moving huge folders around."
        },
        "overrided": {
          "type": "object",
          "properties": {
            "includeOnly": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "deprecated": true
            }
          },
          "additionalProperties": false,
          "deprecated": true
        },
        "overrideNpmName": {
          "type": "string",
          "description": "override npm name for build/relese"
        },
        "appId": {
          "type": "string",
          "description": "Application ID for standalone project. This is used to identify the application inside application stores,"
        },
        "numberOfContexts": {
          "type": "number",
          "description": "Number of contexts for this project. (default 2) Number can't be less than 2. This property tells taon how many ports/variables needs to be assigned inside app.hosts.ts"
        },
        "overrideNameWhenInsideOrganization": {
          "type": "string",
          "description": "it override name of project when is inside container that is organization.\n\nProperty \"overrideNpmName\" can override this name."
        },
        "overrideNameForCli": {
          "type": "string",
          "description": "override name of cli tool created from project"
        },
        "type": {
          "type": "string",
          "const": "isomorphic-lib"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Static resurces for standalone project, that are going to be included in release dist"
        },
        "dependenciesNamesForNpmLib": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "At beginning after node_modules installation taon is checking is packages are installed - if not it will throw error. Also.. this dependencies are going to be included in released npm lib as dependencies."
        },
        "peerDependenciesNamesForNpmLib": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "At beginning after node_modules installation taon is checking is packages are installed - if not it will throw error. Also.. this peerDependencies are going to be included in released npm lib as peerDependencies."
        },
        "additionalNpmNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "so I can release same npm lib with different name",
          "deprecated": "does not make sense"
        },
        "isUsingOwnNodeModulesInsteadCoreContainer": {
          "type": "boolean",
          "description": "Project is using own node_modules instead of core container"
        },
        "usesItsOwnNodeModules": {
          "type": "boolean",
          "deprecated": "use isUsingOwnNodeModulesInsteadCoreContainer"
        },
        "shouldGenerateAutogenIndexFile": {
          "type": "boolean",
          "description": "generate src/lib/index._auto-generated_.ts with all exports from lib ts files"
        },
        "autoReleaseConfigAllowedItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Models.TaonAutoReleaseItem"
          },
          "description": "Auto release helps with releasing multiple projects from a local machine. This is useful when we don't have Taon Cloud set up and want to release all projects with a single command."
        }
      },
      "required": [
        "dependenciesNamesForNpmLib",
        "isCoreProject",
        "packageJsonOverride",
        "peerDependenciesNamesForNpmLib",
        "shouldGenerateAutogenIndexFile",
        "type"
      ],
      "additionalProperties": false
    },
    "CoreModels.FrameworkVersion": {
      "type": "string",
      "enum": [
        "v1",
        "v2",
        "v3",
        "v4",
        "v16",
        "v18",
        "v19",
        "v20",
        "v21",
        "v22"
      ]
    },
    "JsonValue": {
      "anyOf": [
        {
          "$ref": "#/definitions/JsonPrimitive"
        },
        {
          "$ref": "#/definitions/JsonObject"
        },
        {
          "$ref": "#/definitions/JsonArray"
        }
      ],
      "description": "Matches any valid JSON value."
    },
    "JsonPrimitive": {
      "type": [
        "string",
        "number",
        "boolean",
        "null"
      ],
      "description": "Matches any valid JSON primitive value."
    },
    "JsonObject": {
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/JsonValue"
          },
          {
            "$ref": "#/definitions/JsonValue"
          },
          {
            "not": {}
          }
        ]
      },
      "properties": {},
      "description": "Matches a JSON object.\n\nThis type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. Don't use this as a direct return type as the user would have to double-cast it: `jsonObject as unknown as CustomResponse`. Instead, you could extend your CustomResponse type from it to ensure your type only uses JSON-compatible types: `interface CustomResponse extends JsonObject { … }`."
    },
    "JsonArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/JsonValue"
      },
      "description": "Matches a JSON array."
    },
    "PackageJson.Person": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "additionalProperties": false
        }
      ],
      "description": "A person who has been involved in creating or maintaining the package."
    },
    "PackageJson.ExportConditions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/PackageJson.Exports"
      },
      "description": "A mapping of conditions and the paths to which they resolve."
    },
    "PackageJson.Exports": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/PackageJson.ExportConditions"
              }
            ]
          }
        },
        {
          "$ref": "#/definitions/PackageJson.ExportConditions"
        }
      ],
      "description": "Entry points of a module, optionally with conditions and subpath exports."
    },
    "LiteralUnion<(\"aix\"|\"darwin\"|\"freebsd\"|\"linux\"|\"openbsd\"|\"sunos\"|\"win32\"|\"!aix\"|\"!darwin\"|\"!freebsd\"|\"!linux\"|\"!openbsd\"|\"!sunos\"|\"!win32\"),string>": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "string",
          "enum": [
            "aix",
            "darwin",
            "freebsd",
            "linux",
            "openbsd",
            "sunos",
            "win32",
            "!aix",
            "!darwin",
            "!freebsd",
            "!linux",
            "!openbsd",
            "!sunos",
            "!win32"
          ]
        }
      ],
      "description": "Allows creating a union type by combining primitive types and literal types without sacrificing auto-completion in IDEs for the literal type part of the union.\n\nCurrently, when a union type of a primitive type is combined with literal types, TypeScript loses all information about the combined literals. Thus, when such type is used in an IDE with autocompletion, no suggestions are made for the declared literals.\n\nThis type is a workaround for [Microsoft/TypeScript#29729](https://github.com/Microsoft/TypeScript/issues/29729). It will be removed as soon as it's not needed anymore."
    },
    "LiteralUnion<(\"arm\"|\"arm64\"|\"ia32\"|\"mips\"|\"mipsel\"|\"ppc\"|\"ppc64\"|\"s390\"|\"s390x\"|\"x32\"|\"x64\"|\"!arm\"|\"!arm64\"|\"!ia32\"|\"!mips\"|\"!mipsel\"|\"!ppc\"|\"!ppc64\"|\"!s390\"|\"!s390x\"|\"!x32\"|\"!x64\"),string>": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "string",
          "enum": [
            "arm",
            "arm64",
            "ia32",
            "mips",
            "mipsel",
            "ppc",
            "ppc64",
            "s390",
            "s390x",
            "x32",
            "x64",
            "!arm",
            "!arm64",
            "!ia32",
            "!mips",
            "!mipsel",
            "!ppc",
            "!ppc64",
            "!s390",
            "!s390x",
            "!x32",
            "!x64"
          ]
        }
      ],
      "description": "Allows creating a union type by combining primitive types and literal types without sacrificing auto-completion in IDEs for the literal type part of the union.\n\nCurrently, when a union type of a primitive type is combined with literal types, TypeScript loses all information about the combined literals. Thus, when such type is used in an IDE with autocompletion, no suggestions are made for the declared literals.\n\nThis type is a workaround for [Microsoft/TypeScript#29729](https://github.com/Microsoft/TypeScript/issues/29729). It will be removed as soon as it's not needed anymore."
    },
    "LiteralUnion<(\"github\"|\"opencollective\"|\"patreon\"|\"individual\"|\"foundation\"|\"corporation\"),string>": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "string",
          "enum": [
            "github",
            "opencollective",
            "patreon",
            "individual",
            "foundation",
            "corporation"
          ]
        }
      ],
      "description": "Allows creating a union type by combining primitive types and literal types without sacrificing auto-completion in IDEs for the literal type part of the union.\n\nCurrently, when a union type of a primitive type is combined with literal types, TypeScript loses all information about the combined literals. Thus, when such type is used in an IDE with autocompletion, no suggestions are made for the declared literals.\n\nThis type is a workaround for [Microsoft/TypeScript#29729](https://github.com/Microsoft/TypeScript/issues/29729). It will be removed as soon as it's not needed anymore."
    },
    "PackageJson.WorkspacePattern": {
      "type": "string",
      "description": "A workspace pattern points to a directory or group of directories which contain packages that should be included in the workspace installation process.\n\nThe patterns are handled with [minimatch](https://github.com/isaacs/minimatch)."
    },
    "PackageJson": {
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/JsonValue"
          },
          {
            "$ref": "#/definitions/JsonValue"
          },
          {
            "not": {}
          }
        ]
      },
      "properties": {
        "jspm": {
          "$ref": "#/definitions/PackageJson",
          "description": "JSPM configuration."
        },
        "flat": {
          "type": "boolean",
          "description": "If your package only allows one version of a given dependency, and you’d like to enforce the same behavior as `yarn install --flat` on the command-line, set this to `true`.\n\nNote that if your `package.json` contains `\"flat\": true` and other packages depend on yours (e.g. you are building a library rather than an app), those other packages will also need `\"flat\": true` in their `package.json` or be installed with `yarn install --flat` on the command-line."
        },
        "resolutions": {
          "$ref": "#/definitions/PackageJson.Dependency",
          "description": "Selective version resolutions. Allows the definition of custom package versions inside dependencies without manual edits in the `yarn.lock` file."
        },
        "types": {
          "type": "string",
          "description": "Location of the bundled TypeScript declaration file."
        },
        "typesVersions": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "description": "Version selection map of TypeScript."
        },
        "typings": {
          "type": "string",
          "description": "Location of the bundled TypeScript declaration file. Alias of `types`."
        },
        "module": {
          "type": "string",
          "description": "An ECMAScript module ID that is the primary entry point to the program."
        },
        "esnext": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "properties": {
                "main": {
                  "type": "string"
                },
                "browser": {
                  "type": "string"
                }
              },
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "not": {}
                  }
                ]
              }
            }
          ],
          "description": "A module ID with untranspiled code that is the primary entry point to the program."
        },
        "browser": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "boolean",
                "enum": [
                  false
                ]
              }
            }
          ],
          "description": "A hint to JavaScript bundlers or component tools when packaging modules for client side use."
        },
        "sideEffects": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Denote which files in your project are \"pure\" and therefore safe for Webpack to prune if unused.\n\n[Read more.](https://webpack.js.org/guides/tree-shaking/)"
        },
        "name": {
          "type": "string",
          "description": "The name of the package."
        },
        "version": {
          "type": "string",
          "description": "Package version, parseable by [`node-semver`](https://github.com/npm/node-semver)."
        },
        "description": {
          "type": "string",
          "description": "Package description, listed in `npm search`."
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Keywords associated with package, listed in `npm search`."
        },
        "homepage": {
          "$ref": "#/definitions/LiteralUnion%3C%22.%22%2Cstring%3E",
          "description": "The URL to the package's homepage."
        },
        "bugs": {
          "$ref": "#/definitions/PackageJson.BugsLocation",
          "description": "The URL to the package's issue tracker and/or the email address to which issues should be reported."
        },
        "license": {
          "type": "string",
          "description": "The license for the package."
        },
        "licenses": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "description": "The licenses for the package."
        },
        "author": {
          "$ref": "#/definitions/PackageJson.Person"
        },
        "contributors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageJson.Person"
          },
          "description": "A list of people who contributed to the package."
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageJson.Person"
          },
          "description": "A list of people who maintain the package."
        },
        "files": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The files included in the package."
        },
        "type": {
          "type": "string",
          "enum": [
            "module",
            "commonjs"
          ],
          "description": "Resolution algorithm for importing \".js\" files from the package's scope.\n\n[Read more.](https://nodejs.org/api/esm.html#esm_package_json_type_field)"
        },
        "main": {
          "type": "string",
          "description": "The module ID that is the primary entry point to the program."
        },
        "exports": {
          "$ref": "#/definitions/PackageJson.Exports",
          "description": "Subpath exports to define entry points of the package.\n\n[Read more.](https://nodejs.org/api/packages.html#subpath-exports)"
        },
        "imports": {
          "$ref": "#/definitions/PackageJson.Imports",
          "description": "Subpath imports to define internal package import maps that only apply to import specifiers from within the package itself.\n\n[Read more.](https://nodejs.org/api/packages.html#subpath-imports)"
        },
        "bin": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          ],
          "description": "The executable files that should be installed into the `PATH`."
        },
        "man": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Filenames to put in place for the `man` program to find."
        },
        "directories": {
          "$ref": "#/definitions/PackageJson.DirectoryLocations",
          "description": "Indicates the structure of the package."
        },
        "repository": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "directory": {
                  "type": "string",
                  "description": "Relative path to package.json if it is placed in non-root directory (for example if it is part of a monorepo).\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/implemented/0010-monorepo-subdirectory-declaration.md)"
                }
              },
              "required": [
                "type",
                "url"
              ],
              "additionalProperties": false
            }
          ],
          "description": "Location for the code repository."
        },
        "scripts": {
          "$ref": "#/definitions/PackageJson.Scripts",
          "description": "Script commands that are run at various times in the lifecycle of the package. The key is the lifecycle event, and the value is the command to run at that point."
        },
        "config": {
          "$ref": "#/definitions/JsonObject",
          "description": "Is used to set configuration parameters used in package scripts that persist across upgrades."
        },
        "dependencies": {
          "$ref": "#/definitions/PackageJson.Dependency",
          "description": "The dependencies of the package."
        },
        "devDependencies": {
          "$ref": "#/definitions/PackageJson.Dependency",
          "description": "Additional tooling dependencies that are not required for the package to work. Usually test, build, or documentation tooling."
        },
        "optionalDependencies": {
          "$ref": "#/definitions/PackageJson.Dependency",
          "description": "Dependencies that are skipped if they fail to install."
        },
        "peerDependencies": {
          "$ref": "#/definitions/PackageJson.Dependency",
          "description": "Dependencies that will usually be required by the package user directly or via another dependency."
        },
        "peerDependenciesMeta": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "optional": {
                "type": "boolean",
                "const": true
              }
            },
            "required": [
              "optional"
            ],
            "additionalProperties": false
          },
          "description": "Indicate peer dependencies that are optional."
        },
        "bundledDependencies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Package names that are bundled when the package is published."
        },
        "bundleDependencies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Alias of `bundledDependencies`."
        },
        "engines": {
          "type": "object",
          "properties": {
            "npm": {
              "type": "string"
            },
            "node": {
              "type": "string"
            }
          },
          "additionalProperties": {
            "type": "string"
          },
          "description": "Engines that this package runs on."
        },
        "engineStrict": {
          "type": "boolean",
          "deprecated": true
        },
        "os": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiteralUnion%3C(%22aix%22%7C%22darwin%22%7C%22freebsd%22%7C%22linux%22%7C%22openbsd%22%7C%22sunos%22%7C%22win32%22%7C%22!aix%22%7C%22!darwin%22%7C%22!freebsd%22%7C%22!linux%22%7C%22!openbsd%22%7C%22!sunos%22%7C%22!win32%22)%2Cstring%3E"
          },
          "description": "Operating systems the module runs on."
        },
        "cpu": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiteralUnion%3C(%22arm%22%7C%22arm64%22%7C%22ia32%22%7C%22mips%22%7C%22mipsel%22%7C%22ppc%22%7C%22ppc64%22%7C%22s390%22%7C%22s390x%22%7C%22x32%22%7C%22x64%22%7C%22!arm%22%7C%22!arm64%22%7C%22!ia32%22%7C%22!mips%22%7C%22!mipsel%22%7C%22!ppc%22%7C%22!ppc64%22%7C%22!s390%22%7C%22!s390x%22%7C%22!x32%22%7C%22!x64%22)%2Cstring%3E"
          },
          "description": "CPU architectures the module runs on."
        },
        "preferGlobal": {
          "type": "boolean",
          "description": "If set to `true`, a warning will be shown if package is installed locally. Useful if the package is primarily a command-line application that should be installed globally.",
          "deprecated": true
        },
        "private": {
          "type": "boolean",
          "description": "If set to `true`, then npm will refuse to publish it."
        },
        "publishConfig": {
          "$ref": "#/definitions/PackageJson.PublishConfig",
          "description": "A set of config values that will be used at publish-time. It's especially handy to set the tag, registry or access, to ensure that a given package is not tagged with 'latest', published to the global public registry or that a scoped module is private by default."
        },
        "funding": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "$ref": "#/definitions/LiteralUnion%3C(%22github%22%7C%22opencollective%22%7C%22patreon%22%7C%22individual%22%7C%22foundation%22%7C%22corporation%22)%2Cstring%3E",
                  "description": "The type of funding."
                },
                "url": {
                  "type": "string",
                  "description": "The URL to the funding page."
                }
              },
              "required": [
                "url"
              ],
              "additionalProperties": false
            }
          ],
          "description": "Describes and notifies consumers of a package's monetary support information.\n\n[Read more.](https://github.com/npm/rfcs/blob/latest/accepted/0017-add-funding-support.md)"
        },
        "workspaces": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageJson.WorkspacePattern"
              }
            },
            {
              "$ref": "#/definitions/PackageJson.WorkspaceConfig"
            }
          ],
          "description": "Used to configure [npm workspaces](https://docs.npmjs.com/cli/using-npm/workspaces) / [Yarn workspaces](https://classic.yarnpkg.com/docs/workspaces/).\n\nWorkspaces allow you to manage multiple packages within the same repository in such a way that you only need to run your install command once in order to install all of them in a single pass.\n\nPlease note that the top-level `private` property of `package.json` **must** be set to `true` in order to use workspaces."
        },
        "packageManager": {
          "type": "string",
          "description": "Defines which package manager is expected to be used when working on the current project. It can set to any of the [supported package managers](https://nodejs.org/api/corepack.html#supported-package-managers), and will ensure that your teams use the exact same package manager versions without having to install anything else than Node.js.\n\n__This field is currently experimental and needs to be opted-in; check the [Corepack](https://nodejs.org/api/corepack.html) page for details about the procedure.__"
        }
      },
      "description": "Type for [npm's `package.json` file](https://docs.npmjs.com/creating-a-package-json-file). Also includes types for fields used by other popular projects, like TypeScript and Yarn."
    },
    "PackageJson.Dependency": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "description": "Dependencies of the package. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or Git URL."
    },
    "LiteralUnion<\".\",string>": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "string",
          "enum": [
            "."
          ]
        }
      ],
      "description": "Allows creating a union type by combining primitive types and literal types without sacrificing auto-completion in IDEs for the literal type part of the union.\n\nCurrently, when a union type of a primitive type is combined with literal types, TypeScript loses all information about the combined literals. Thus, when such type is used in an IDE with autocompletion, no suggestions are made for the declared literals.\n\nThis type is a workaround for [Microsoft/TypeScript#29729](https://github.com/Microsoft/TypeScript/issues/29729). It will be removed as soon as it's not needed anymore."
    },
    "PackageJson.BugsLocation": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "The URL to the package's issue tracker."
            },
            "email": {
              "type": "string",
              "description": "The email address to which issues should be reported."
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PackageJson.Imports": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/PackageJson.Exports"
      },
      "description": "Import map entries of a module, optionally with conditions and subpath imports."
    },
    "PackageJson.DirectoryLocations": {
      "type": "object",
      "properties": {
        "bin": {
          "type": "string",
          "description": "Location for executable scripts. Sugar to generate entries in the `bin` property by walking the folder."
        },
        "doc": {
          "type": "string",
          "description": "Location for Markdown files."
        },
        "example": {
          "type": "string",
          "description": "Location for example scripts."
        },
        "lib": {
          "type": "string",
          "description": "Location for the bulk of the library."
        },
        "man": {
          "type": "string",
          "description": "Location for man pages. Sugar to generate a `man` array by walking the folder."
        },
        "test": {
          "type": "string",
          "description": "Location for test files."
        }
      },
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/JsonValue"
          },
          {
            "not": {}
          }
        ]
      }
    },
    "PackageJson.Scripts": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "properties": {
        "prepublish": {
          "type": "string",
          "description": "Run **before** the package is published (Also run on local `npm install` without any arguments)."
        },
        "prepare": {
          "type": "string",
          "description": "Run both **before** the package is packed and published, and on local `npm install` without any arguments. This is run **after** `prepublish`, but **before** `prepublishOnly`."
        },
        "prepublishOnly": {
          "type": "string",
          "description": "Run **before** the package is prepared and packed, **only** on `npm publish`."
        },
        "prepack": {
          "type": "string",
          "description": "Run **before** a tarball is packed (on `npm pack`, `npm publish`, and when installing git dependencies)."
        },
        "postpack": {
          "type": "string",
          "description": "Run **after** the tarball has been generated and moved to its final destination."
        },
        "publish": {
          "type": "string",
          "description": "Run **after** the package is published."
        },
        "postpublish": {
          "type": "string",
          "description": "Run **after** the package is published."
        },
        "preinstall": {
          "type": "string",
          "description": "Run **before** the package is installed."
        },
        "install": {
          "type": "string",
          "description": "Run **after** the package is installed."
        },
        "postinstall": {
          "type": "string",
          "description": "Run **after** the package is installed and after `install`."
        },
        "preuninstall": {
          "type": "string",
          "description": "Run **before** the package is uninstalled and before `uninstall`."
        },
        "uninstall": {
          "type": "string",
          "description": "Run **before** the package is uninstalled."
        },
        "postuninstall": {
          "type": "string",
          "description": "Run **after** the package is uninstalled."
        },
        "preversion": {
          "type": "string",
          "description": "Run **before** bump the package version and before `version`."
        },
        "version": {
          "type": "string",
          "description": "Run **before** bump the package version."
        },
        "postversion": {
          "type": "string",
          "description": "Run **after** bump the package version."
        },
        "pretest": {
          "type": "string",
          "description": "Run with the `npm test` command, before `test`."
        },
        "test": {
          "type": "string",
          "description": "Run with the `npm test` command."
        },
        "posttest": {
          "type": "string",
          "description": "Run with the `npm test` command, after `test`."
        },
        "prestop": {
          "type": "string",
          "description": "Run with the `npm stop` command, before `stop`."
        },
        "stop": {
          "type": "string",
          "description": "Run with the `npm stop` command."
        },
        "poststop": {
          "type": "string",
          "description": "Run with the `npm stop` command, after `stop`."
        },
        "prestart": {
          "type": "string",
          "description": "Run with the `npm start` command, before `start`."
        },
        "start": {
          "type": "string",
          "description": "Run with the `npm start` command."
        },
        "poststart": {
          "type": "string",
          "description": "Run with the `npm start` command, after `start`."
        },
        "prerestart": {
          "type": "string",
          "description": "Run with the `npm restart` command, before `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
        },
        "restart": {
          "type": "string",
          "description": "Run with the `npm restart` command. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
        },
        "postrestart": {
          "type": "string",
          "description": "Run with the `npm restart` command, after `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided."
        }
      }
    },
    "PackageJson.PublishConfig": {
      "type": "object",
      "properties": {
        "access": {
          "type": "string",
          "enum": [
            "public",
            "restricted"
          ],
          "description": "When publishing scoped packages, the access level defaults to restricted. If you want your scoped package to be publicly viewable (and installable) set `--access=public`. The only valid values for access are public and restricted. Unscoped packages always have an access level of public."
        },
        "registry": {
          "type": "string",
          "description": "The base URL of the npm registry.\n\nDefault: `'https://registry.npmjs.org/'`"
        },
        "tag": {
          "type": "string",
          "description": "The tag to publish the package under.\n\nDefault: `'latest'`"
        }
      },
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/JsonValue"
          },
          {
            "not": {}
          }
        ],
        "description": "Additional, less common properties from the [npm docs on `publishConfig`](https://docs.npmjs.com/cli/v7/configuring-npm/package-json#publishconfig)."
      }
    },
    "PackageJson.WorkspaceConfig": {
      "type": "object",
      "properties": {
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageJson.WorkspacePattern"
          },
          "description": "An array of workspace pattern strings which contain the workspace packages."
        },
        "nohoist": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageJson.WorkspacePattern"
          },
          "description": "Designed to solve the problem of packages which break when their `node_modules` are moved to the root workspace directory - a process known as hoisting. For these packages, both within your workspace, and also some that have been installed via `node_modules`, it is important to have a mechanism for preventing the default Yarn workspace behavior. By adding workspace pattern strings here, Yarn will resume non-workspace behavior for any package which matches the defined patterns.\n\n[Supported](https://classic.yarnpkg.com/blog/2018/02/15/nohoist/) by Yarn. [Not supported](https://github.com/npm/rfcs/issues/287) by npm."
        }
      },
      "additionalProperties": false,
      "description": "An alternative configuration for workspaces."
    },
    "Models.TaonAutoReleaseItem": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": "string",
          "enum": [
            "npm-lib-and-cli-tool",
            "angular-node-app",
            "electron-app",
            "mobile-app",
            "vscode-plugin",
            "docs-webapp"
          ]
        },
        "envName": {
          "type": "string",
          "enum": [
            "localhost",
            "dev",
            "stage",
            "prod",
            "test",
            "qa",
            "sandbox",
            "uat",
            "preprod",
            "demo",
            "docs",
            "static-pages",
            "ci",
            "training"
          ],
          "description": "if not proviede default  env.<artifact-name>.__.ts will be in use"
        },
        "envNumber": {
          "type": "number",
          "description": "example for dev environtment > undefined - env.<artifact-name>.dev.ts > 1 - env.<artifact-name>.dev1.ts > 2 - env.<artifact-name>.dev2.ts ..."
        },
        "skip": {
          "type": "boolean",
          "description": "skip release of this artifact"
        },
        "releaseType": {
          "$ref": "#/definitions/ReleaseType",
          "description": "select release type for automatic release"
        }
      },
      "required": [
        "artifactName"
      ],
      "additionalProperties": false
    },
    "ReleaseType": {
      "type": "string",
      "enum": [
        "manual",
        "local",
        "cloud",
        "static-pages"
      ]
    }
  }
}